---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS CloudFormation stack to run a serverless password-protected photo gallery

Parameters:
  sslCertificateArn:
    Description: ARN of the SSL certificate that should be used
    Type: String
  websiteTitle:
    Description: Title to be displayed on the website
    Type: String
  webBucket:
    Description: Bucket to store published website
    Type: String
  sourceBucket:
    Description: Bucket to store site data such as original pictures and metadata
    Type: String
  resizedBucket:
    Description: Bucket to store resized pictures
    Type: String
  originAccessIdentity:
    Description: CloudFront OAI
    Type: String
  website:
    Description: Actual website
    Type: String
  sessionDuration:
    Description: Number of seconds the user has access to the file
    Type: Number
  kmsKeyId:
    Description: ID of the KMS key used to encrypt other parameters
    Type: String
    NoEcho: true
  cloudFrontKeypairId:
    Description: CloudFront keypair ID encrypted with KMS
    Type: String
    Default: ''
    NoEcho: true
  encryptedCloudFrontPrivateKey:
    Description: CloudFront private key encrypted with KMS
    Type: String
    NoEcho: true
  googleanalytics:
    Description: Google tracking id (gtag)
    Type: String
  picsOriginalPath:
    Description: Path prefix to original albums and pictures
    Type: String
    Default: ''
  albumSort:
    Description: Album sort order (asc or desc, or blank)
    Type: String
    Default: ''
  pictureSort:
    Description: Picture sort order (asc or desc, or blank)
    Type: String
    Default: ''
  collectionSort:
    Description: Collection sort order (asc or desc, or blank)
    Type: String
    Default: ''
  groupAlbumsIntoCollections:
    Description: Group first by collections then by albums (true or blank)
    Type: String
    Default: ''
  spacesInsteadOfTabs:
    Description: Indent HTML output with spaces instead of tabs (true or blank)
    Type: String
    Default: ''
  homePageCreditsOverride:
    Description: Show this HTML instead of the default credits link on the home page
    Type: String
    Default: ''
  hideHomePageCredits:
    Description: His te default credits link on the home page (true or blank)
    Type: String
    Default: ''
  ImageMagickLayer:
    Description: layer for nodejs10.x and nodejs12.x for imagemagick here https://serverlessrepo.aws.amazon.com/applications/arn:aws:serverlessrepo:us-east-1:145266761615:applications~image-magick-lambda-layer
    Type: String
  LambdaRate:
    Description: The rate (frequency) that determines when CloudWatch Events runs the rule that triggers the SiteBuilderFunction.
    Default: rate(365 days)
    AllowedValues:
      - rate(8 hours)
      - rate(1 day)
      - rate(7 days)
      - rate(30 days)
      - rate(90 days)
      - rate(365 days)
    Type: String

Resources:
  PasswordSsmParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Password to log in to mijnfotos."
      Name: !Sub "/lambda/mijnfotos-login/password"
      Type: String
      Value: "placeholder"

  #
  # Login Lambda function definition
  #
  LoginFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: "mijnfotos-login-lambda-cf"
      Handler: "lambda_function.handler"
      Runtime: "python3.8"
      CodeUri: "dist/lambda-login.zip"
      Role: !GetAtt LambdaRole.Arn
      Timeout: 30
      MemorySize: 128
      Events:
        GetResource:
          Type: "Api"
          Properties:
            Path: "/login"
            Method: "post"

  #
  # Login IAM role so the Lambda can log (CloudWatch), get SSM parameters and Invoke Lambda functions
  #
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "mijnfotos-login-role-cf"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action: ["sts:AssumeRole"]
            Principal:
              Service: ["lambda.amazonaws.com"]
      Policies:
        - PolicyName: "get-ssm-parameter"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/lambda/mijnfotos-login/password"
                Action:
                  - "ssm:GetParameters"
                  - "ssm:DescribeParameters"
                  - "ssm:GetParameter"
        - PolicyName: "invoke-lambda"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:mijnfotos-cookies-lambda-cf"
                Action:
                  - "lambda:InvokeFunction"

  #
  # Cookies Lambda function definition
  #
  CookiesFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: "mijnfotos-cookies-lambda-cf"
      Handler: "index.handler"
      Runtime: "nodejs10.x"
      CodeUri: "dist/lambda-cookies.zip"
      Role: !GetAtt CookiesLambdaRole.Arn
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          WEBSITE_DOMAIN: !Ref website
          SESSION_DURATION: !Ref sessionDuration
          CLOUDFRONT_KEYPAIR_ID: !Ref cloudFrontKeypairId
          ENCRYPTED_CLOUDFRONT_PRIVATE_KEY: !Ref encryptedCloudFrontPrivateKey

  #
  # Cookies IAM role so the Lambda can log (CloudWatch) and decrypt secrets (KMS)
  #
  CookiesLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "mijnfotos-cookies-role-cf"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action: ["sts:AssumeRole"]
            Principal:
              Service: ["lambda.amazonaws.com"]
      Policies:
        - PolicyName: "KmsDecrypt"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Resource: !Sub
                  - arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${id}
                  - id: !Ref kmsKeyId
                Action: ["kms:Decrypt"]

  #
  # Resize Lambda function definition
  #
  ResizeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: mijnfotos-resize-lambda-cf
      Handler: index.handler
      Runtime: nodejs10.x
      CodeUri: dist/lambda-resize.zip
      Layers:
        - !Ref ImageMagickLayer
      Role: !GetAtt ResizeLambdaRole.Arn
      Environment:
        Variables:
          RESIZED_BUCKET: !Ref resizedBucket
          PICS_ORIGINAL_PATH: !Ref picsOriginalPath
      Timeout: 30
      MemorySize: 1024

  #
  # Resize IAM role so the Lambda can log (CloudWatch) and read/write S3 objects
  #
  ResizeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: mijnfotos-resize-role-cf
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaServiceToAssumeRole
            Effect: Allow
            Action: ['sts:AssumeRole']
            Principal:
              Service: [lambda.amazonaws.com]
      Policies:
        - PolicyName: ResizeLambdaGetOriginal
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:s3:::${sourceBucket}/*'
                  - sourceBucket: !Ref sourceBucket
                Action: ['s3:GetObject']
        - PolicyName: ResizeLambdaPutResized
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:s3:::${resizedBucket}/*'
                  - resizedBucket: !Ref resizedBucket
                Action: ['s3:PutObject']

  #
  # CloudWatch Events Rule to run sitebuilder at some frequency
  #
  LambdaSchedule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: mijnfotos-event-rule-cf
      Description: A schedule for the Lambda function.
      ScheduleExpression: !Ref LambdaRate
      State: ENABLED
      Targets:
        - Arn: !Sub ${SiteBuilderFunction.Arn}
          Id: LambdaSchedule
  #
  # Permission to invoke a lambda function with the CloudWatch Event
  #
  LambdaSchedulePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref SiteBuilderFunction
      Principal: 'events.amazonaws.com'
      SourceArn: !Sub ${LambdaSchedule.Arn}

  EventInvokeConfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
        FunctionName: !Ref SiteBuilderFunction
        Qualifier: "$LATEST"
        MaximumEventAgeInSeconds: 60
        MaximumRetryAttempts: 0
    DependsOn: LambdaSchedulePermission

  #
  # Site Builder Lambda function definition
  #
  SiteBuilderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: mijnfotos-sitebuilder-lambda-cf
      Handler: index.handler
      Runtime: nodejs10.x
      CodeUri: dist/lambda-site-builder.zip
      Environment:
        Variables:
          WEBSITE_TITLE: !Ref websiteTitle
          CLOUDFRONT_DISTRIBUTION_DOMAIN:
            !GetAtt WebDistribution.DomainName
          ORIGINAL_BUCKET: !Ref sourceBucket
          SITE_BUCKET: !Ref webBucket
          WEBSITE: !Ref website
          GOOGLEANALYTICS: !Ref googleanalytics
          PICS_ORIGINAL_PATH: !Ref picsOriginalPath
          ALBUM_SORT: !Ref albumSort
          PICTURE_SORT: !Ref pictureSort
          COLLECTION_SORT: !Ref collectionSort
          GROUP_ALBUMS_INTO_COLLECTIONS: !Ref groupAlbumsIntoCollections
          SPACES_INSTEAD_OF_TABS: !Ref spacesInsteadOfTabs
          HOME_PAGE_CREDITS_OVERRIDE: !Ref homePageCreditsOverride
          HIDE_HOME_PAGE_CREDITS: !Ref hideHomePageCredits
      Role: !GetAtt SiteBuilderLambdaRole.Arn
      Timeout: 900
      MemorySize: 3008

  #
  # Site Builder IAM role so the Lambda can log (CloudWatch) and read/write S3 objects
  #
  SiteBuilderLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: mijnfotos-sitebuilder-role-cf
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaServiceToAssumeRole
            Effect: Allow
            Action: ['sts:AssumeRole']
            Principal:
              Service: [lambda.amazonaws.com]
      Policies:
        - PolicyName: SiteBuilderLambdaGetOriginal
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:s3:::${sourceBucket}/*'
                  - sourceBucket: !Ref sourceBucket
                Action: ['s3:GetObject']
        - PolicyName: SiteBuilderLambdaListOriginal
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:s3:::${sourceBucket}'
                  - sourceBucket: !Ref sourceBucket
                Action: ['s3:ListBucket']
        - PolicyName: SiteBuilderLambdaPutSite
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:s3:::${webBucket}/*'
                  - webBucket: !Ref webBucket
                Action: ['s3:PutObject']
        - PolicyName: SiteBuilderLambdaInvalidateDistribution
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - cloudfront:CreateInvalidation
                  - cloudfront:ListDistributions

  #
  # Source Bucket
  #
  ResizeInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ResizeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub
        - arn:aws:s3:::${sourceBucket}
        - sourceBucket: !Ref sourceBucket

  SourceBucket:
    Type: AWS::S3::Bucket
    DependsOn: ResizeInvokePermission
    Properties:
      BucketName: !Ref sourceBucket
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt ResizeFunction.Arn
      PublicAccessBlockConfiguration:
        BlockPublicAcls       : true
        BlockPublicPolicy     : true
        IgnorePublicAcls      : true
        RestrictPublicBuckets : true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: CheaperS3StorageIntelligentTieringBecauseCachedOnCloudfront
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            Transition:
              StorageClass: INTELLIGENT_TIERING
              TransitionInDays: 30

  SourceBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SourceBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub
              - '${bucket}/*'
              - bucket: !GetAtt SourceBucket.Arn
            Principal:
              AWS: !Sub
                - arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${id}
                - id: !Ref originAccessIdentity
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: "*"
            Action:
              - s3:PutObject
            Resource:
              - !Join ["", ["arn:aws:s3:::", !Ref sourceBucket, "/*"]]
            Condition:
              StringNotEquals:
                "s3:x-amz-server-side-encryption":
                  - "AES256"

  #
  # Resized Bucket
  #
  ResizedBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref resizedBucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls       : true
        BlockPublicPolicy     : true
        IgnorePublicAcls      : true
        RestrictPublicBuckets : true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: CheaperS3StorageIntelligentTieringBecauseCachedOnCloudfront
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            Transition:
              StorageClass: INTELLIGENT_TIERING
              TransitionInDays: 30

  ResizedBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ResizedBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub
              - '${bucket}/*'
              - bucket: !GetAtt ResizedBucket.Arn
            Principal:
              AWS: !Sub
                - arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${id}
                - id: !Ref originAccessIdentity
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: "*"
            Action:
              - s3:PutObject
            Resource:
              - !Join ["", ["arn:aws:s3:::", !Ref resizedBucket, "/*"]]
            Condition:
              StringNotEquals:
                "s3:x-amz-server-side-encryption":
                  - "AES256"

  #
  # Web Bucket
  #
  WebBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref webBucket
  WebBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub
              - '${bucket}/*'
              - bucket: !GetAtt WebBucket.Arn
            Principal:
              AWS: !Sub
                - arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${id}
                - id: !Ref originAccessIdentity

  #
  # CloudFront Distribution
  #
  WebDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        HttpVersion: http2
        Aliases:
          - !Ref website
        Origins:
          - DomainName: !Sub
              - ${resizedBucket}.s3.amazonaws.com
              - resizedBucket: !Ref resizedBucket
            Id: S3-ResizedBucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub
                - origin-access-identity/cloudfront/${id}
                - id: !Ref originAccessIdentity
          - DomainName: !Sub
              - ${sourceBucket}.s3.amazonaws.com
              - sourceBucket: !Ref sourceBucket
            Id: S3-SourceBucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub
                - origin-access-identity/cloudfront/${id}
                - id: !Ref originAccessIdentity
          - DomainName: !Sub
              - ${webBucket}.s3.amazonaws.com
              - webBucket: !Ref webBucket
            Id: S3-WebBucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub
                - origin-access-identity/cloudfront/${id}
                - id: !Ref originAccessIdentity
          - DomainName: !Sub
              - ${apiID}.execute-api.${AWS::Region}.amazonaws.com
              - apiID: !Ref ServerlessRestApi
            Id: Custom-LoginAPI
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
        CacheBehaviors:
          - TargetOriginId: S3-ResizedBucket
            TrustedSigners:
              - self
            ViewerProtocolPolicy: https-only
            PathPattern: 'pics/resized/*'
            Compress: true
            MinTTL: 0
            DefaultTTL: 86400
            MaxTTL: 31536000
            ForwardedValues:
              QueryString: false
          - TargetOriginId: S3-SourceBucket
            TrustedSigners:
              - self
            ViewerProtocolPolicy: https-only
            PathPattern: 'pics/original/*'
            Compress: true
            MinTTL: 0
            DefaultTTL: 86400
            MaxTTL: 31536000
            ForwardedValues:
              QueryString: false
          - TargetOriginId: Custom-LoginAPI
            ViewerProtocolPolicy: https-only
            PathPattern: 'Prod/*'
            AllowedMethods:
              - HEAD
              - DELETE
              - POST
              - GET
              - OPTIONS
              - PUT
              - PATCH
            ForwardedValues:
              QueryString: false
              Headers:
                - Accept
                - Authorization
                - Content-Type
                - Referer
        Enabled: true
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 403
            ResponsePagePath: /error.html
            ResponseCode: 403
          - ErrorCode: 404
            ResponsePagePath: /index.html
            ResponseCode: 404
        DefaultCacheBehavior:
          TargetOriginId: S3-WebBucket
          TrustedSigners:
            - self
          ForwardedValues:
            QueryString: false
          ViewerProtocolPolicy: https-only
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref sslCertificateArn
          SslSupportMethod: 'sni-only'
          MinimumProtocolVersion: 'TLSv1.2_2019'
        # Restrictions:
        #   GeoRestriction:
        #     RestrictionType: 'whitelist'
        #     Locations:
        #       - 'US'
